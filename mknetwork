#!/bin/sh

##########################################
# This script takes an OSM xml data file
# and processes it so it can be used with
# this project. The bulk of the processing
# is handled by spatialite_osm_net. The
# remainder is reprojecting the data into
# crsf used by this project and setting up
# a spatial index on the node data.
##########################################

if [ $1 = '--help' ] || [ $1 = '-h' ] || [ -z $2 ] ; then
    echo 'Usage: mknetwork NETWORK_DATABASE OSM_DATA_FILE'
    exit
fi

OSM_DATA=$2
NETWORK_DB=$1

NETWORK_EDGE_TABLE=network
NETWORK_NODE_TABLE=${NETWORK_EDGE_TABLE}_nodes
EPSG=3857

# generate initial spatialite database from osm data
spatialite_osm_net -d $NETWORK_DB -o $OSM_DATA --roads -T $NETWORK_EDGE_TABLE

# transform to store database projection and create spatial index
TEMP_NODE_TABLE=${NETWORK_NODE_TABLE}_proj
spatialite $NETWORK_DB <<EOF
    BEGIN;

    --temp table to hold projected data
    CREATE TABLE $TEMP_NODE_TABLE
    AS SELECT node_id, osm_id, cardinality, geometry
    FROM $NETWORK_NODE_TABLE;

    --project geometry to epgs used by grocery store database
    UPDATE $TEMP_NODE_TABLE SET geometry=(
      SELECT ST_Transform($NETWORK_NODE_TABLE.geometry, $EPSG)
      FROM $NETWORK_NODE_TABLE 
      WHERE $NETWORK_NODE_TABLE.node_id = $TEMP_NODE_TABLE.node_id);

    SELECT RecoverGeometryColumn('$TEMP_NODE_TABLE', 'geometry', $EPSG, 'POINT');

    --drop original database then rename temp
    DROP TABLE $NETWORK_NODE_TABLE;

    ALTER TABLE $TEMP_NODE_TABLE RENAME TO $NETWORK_NODE_TABLE;

    --create indices to optimize some queries
    SELECT CreateSpatialIndex('$NETWORK_NODE_TABLE', 'geometry');
    CREATE INDEX idx_node_id ON $NETWORK_NODE_TABLE (node_id);
    CREATE INDEX idx_edge_node_to ON $NETWORK_EDGE_TABLE (node_to);
    CREATE INDEX idx_edge_node_from ON $NETWORK_EDGE_TABLE (node_from);

    COMMIT;

    VACUUM;
EOF
